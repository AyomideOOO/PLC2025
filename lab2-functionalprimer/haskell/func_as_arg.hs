-- Create inpFunc that generates a list from a to b
inpFunc :: Int -> Int -> [Int]
inpFunc a b = [a..b]

-- Define applicatorFunc
applicatorFunc :: (Int -> Int -> [Int]) -> Int -> Int -> Char -> Float
applicatorFunc inpFunc a b s = 
    if s == 's' 
    then fromIntegral (sum (inpFunc a b))  -- sum the list generated by inpFunc
    else fromIntegral (sum (inpFunc a b)) / fromIntegral (b - a + 1)  -- compute the average

-- Main function
main :: IO ()
main = do
    -- Call applicatorFunc with inpFunc, a=1, b=5, and 's' as args
    let result :: Float
        result = applicatorFunc inpFunc 1 10 's'
    
    -- Print the result using show
    putStrLn ("Result = " ++ show result)
